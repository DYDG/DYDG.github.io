---
title:  "Install !"
date:   2019-07-22 04:44:23
categories: [Dyleson]
tags: [setup]
---
## How to install Ubuntu 18.04 on SSD+HDD
Step by step tutorial (just skip what you already did):

### 1. Boot from the installation drive
Create a bootable USB drive with the installation image and then boot from it to begin the OS installation.

### 2. Go through the installation process
Choose the options that suit you best. When prompted to choose instalation type, select "Something Else" to create the partitions for the OS. To create a partition, just click the "+" sign on "free space". You will need to create the following partitions on your SSD:

**root**
Size: 30-50GB
Type: Primary
Use As: ext4 Journaling file system
Mount Point: /

**swap (optional)**
Size: see this post to decide on a size (and whether you want swap at all)
Type: Logical
Use As: swap area

**home (optional, check this post for more info)**
Size: the rest of your free space, generally
Type: Logical
Use As: ext4 Journaling file system

Mount Point: /home
### 3. Set up your HDD to mount automatically on boot
Easiest way to do this imo is through the gnome-disks GUI tool (to use it, just open a terminal 
- Ctrl+Alt+T, type in sudo gnome-disks and enter your password). Select your HDD, click on the cogwheels -> "Edit Mount Options...", enable "Mount at system startup" and choose a mount point (for example, /mnt/sda1 or whatever that device is identified as, or /media/user/DATA).

### 4. Link ~ (/home/user) media folders to the HDD for easy access
You will have a few default media folders in your ~ folder, which you might want to have on the HDD instead. 
To move them to the HDD while still being able to access them easily from /home/user, you will need to move those folders to the HDD (or just delete them and create other folders) and then create symbolic links instead, using a terminal command like:
```c++
ln -s /media/dy/DATA/Downloads ~/Downloads
```
## How to install Fcitx
**Mỗi loại đều có ưu điểm riêng nhưng bộ gõ đang được phát triển mạnh hơn cả là Fcitx, hỗ trợ các môi trường khách nhau như (Gtk, gtk3, qt4, qt5) nên bài này mình hướng dẫn sử dụng fcitx.**

**Sau khi cài đặt ubuntu xong thì:**
**Gõ lệnh:**
```c++
sudo apt-get update
sudo apt-get install fcitx fcitx-frontend-gtk2 fcitx-frontend-gtk3 fcitx-frontend-qt4 fcitx-frontend-qt5 fcitx-unikey
```
**Config fcitx là xim mặc định**
Gõ lệnh:
```c++
sudo im-config
```
**Chọn Fcitx trong danh sách các xim bên trong vào ok để đóng. Done ! khởi động lại máy tính để hoàn thành**
**Thêm fcitx-unikey vào danh sách bộ gõ**
**Gõ lệnh:**
```c++
fcitx-configtool
```
**Gõ unikey trong ô tìm kiếm và bấm dấu mũ tên --> or add**
**Well done! bấm OK để đóng và vào applications bất kỳ gõ Ctrl + Space để kích hoạt bộ gõ unikey và gõ thôi.**
## How to install Qt 5.7.1

[Download Qt 5.7.1 ][QT]

[QT]:https://download.qt.io/archive/qt/5.7/5.7.1/


**chọn file  qt-opensource-linux-x64-android-5.7.1.run**
``` c++
chmod +x file.run

./file.run

sudo apt-get install build-essential

sudo apt-get install libfontconfig1

sudo apt-get install libglu1-mesa-dev -y

sudo apt-get install mesa-common-dev
``` 
## How to install opencv 3.4.3
``` c++
sudo apt install build-essential cmake git pkg-config libgtk-3-dev

sudo apt install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev

sudo apt install libjpeg-dev libpng-dev libtiff-dev gfortran openexr

sudo apt install python3-dev python3-numpy libtbb2 libtbb-dev libdc1394-22-dev

mkdir ~/opencv_build && cd ~/opencv_build
``` 

[Download opencv 3.4.3][opencv]

[opencv]: https://github.com/opencv/opencv/archive/3.4.3.zip

[Download opencv_contrib][contrib]

[contrib]: https://github.com/opencv/opencv_contrib/archive/3.4.3.zip

**extract file .zip  and rename folder opencv-3.4.3 to opencv, rename folder opencv_contrib-3.4.3 to opencv_contrib**


**copy 2 folder opencv, opencv_contrib to folder opencv_build**

``` c++
cd ~/opencv_build/opencv 
mkdir build && cd build 		
``` 
``` c++
cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_C_EXAMPLES=ON \
    -D BUILD_opencv_nonfree= ON \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_build/opencv_contrib/modules \
    -D BUILD_EXAMPLES=ON ..
```
[more infor][more]

[more]: https://linuxize.com/post/how-to-install-opencv-on-ubuntu-18-04/
``` c++
make -j4    (or -j8 typing "nproc" on terminal will be let you knows -j4 or -j8).

sudo make install
``` 

**check version typing "pkg-config --modversion opencv"**

## How to install ROS 

**Configure your Ubuntu repositories to allow "restricted," "universe," and "multiverse" like picture**

![](https://lh5.googleusercontent.com/u6aRh__8rH7IlFmKwTcZFA9_2nFFbBJmzjdHoBFw_wcB-YarRDcPoxLzymf6qEGmPZVcGy9stcef3PZaWilZX7DgqlLkacnyrkO2_-tU7FlNi829_JyH=w773)

``` c++
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'

sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116

sudo apt update

sudo apt install ros-melodic-desktop-full

sudo rosdep init

rosdep update

echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc

source ~/.bashrc

sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential
```

**Create catkin workspace**

``` c++
mkdir -p ~/catkin_ws/src

cd ~/catkin_ws/

catkin_make

echo "source ~/catkin_ws/devel/setup.bash" >> ~/.bashrc

source ~/.bashrc


sudo apt-get install ros-melodic-rosbridge-server

``` 

**dowload packge here and copy to folder  "src"  in  "catkin_ws/"**

 
[ROS_Package_example][ROS]

[ROS]: https://github.com/fpt-corp/ROS_Package_example.git

``` c++

cd ~/catkin_ws/

catkin_make

roslaunch lane_detect lane_detect.launch
``` 




